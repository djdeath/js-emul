let BSJSParser = ometa(BaseStrParser) {
  enum :r :d   = listOf(r, d):v ("," | empty) -> v,
  space        = ^space | fromTo('//', '\n') | fromTo('/*', '*/'),
  nameFirst    = letter | '$' | '_',
  nameRest     = nameFirst | digit,
  iName        = <nameFirst nameRest*>,
  isKeyword :x = ?BSJSParser._isKeyword(x),
  name         = iName:n ~isKeyword(n)                                               -> [#name, n=='self' ? '$elf' : n],
  keyword      = iName:k isKeyword(k)                                                -> [k, k],
  hexDigit     = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)        -> v,
  hexLit       = hexLit:n hexDigit:d                                                 -> (n * 16 + d)
               | hexDigit,
  number       = ``0x'' hexLit:n                                                     -> [#number, n]
               | <digit+ ('.' digit+)?>:f                                            -> [#number, parseFloat(f)],
  escapeChar   = <'\\' ( 'u' hexDigit hexDigit hexDigit hexDigit
                       | 'x' hexDigit hexDigit
                       | char                                    )>:s                -> unescape(s),
  str          = seq('"""')  (~seq('"""') char)*:cs seq('"""')                       -> [#string, cs.join('')]
               | '\'' (escapeChar | ~'\'' char)*:cs '\''                             -> [#string, cs.join('')]
               | '"'  (escapeChar | ~'"'  char)*:cs '"'                              -> [#string, cs.join('')]
               | ('#' | '`') iName:n                                                 -> [#string, n],
  special      = ( '('   | ')'    | '{'    | '}'     | '['    | ']'     | ','
                 | ';'   | '?'    | ':'    | ``!=='' | ``!='' | ``==='' | ``==''
                 | ``='' | ``>='' | '>'    | ``<=''  | '<'    | ``++''  | ``+=''
                 | '+'   | ``--'' | ``-='' | '-'     | ``*='' | '*'     | ``/=''
                 | '/'   | ``%='' | '%'    | ``&&='' | ``&&'' | ``||='' | ``||''
                 | '.'   | '!'                                                   ):s -> [s, s],
  tok          = spaces (name | keyword | number | str | special),
  toks         = token*:ts spaces end                                                -> ts,
  token :tt    = tok:t ?(t[0] == tt)                                                 -> t[1],
  spacesNoNl   = (~'\n' space)*,
  expr         = orExpr:e ( "?"   expr:t   ":" expr:f                                -> [#condExpr, e, t, f]
                          | "="   expr:rhs                                           -> [#set,  e, rhs,       @location]
                          | "+="  expr:rhs                                           -> [#mset, e, "+",  rhs, @location]
                          | "-="  expr:rhs                                           -> [#mset, e, "-",  rhs, @location]
                          | "*="  expr:rhs                                           -> [#mset, e, "*",  rhs, @location]
                          | "/="  expr:rhs                                           -> [#mset, e, "/",  rhs, @location]
                          | "%="  expr:rhs                                           -> [#mset, e, "%",  rhs, @location]
                          | "&&=" expr:rhs                                           -> [#mset, e, "&&", rhs, @location]
                          | "||=" expr:rhs                                           -> [#mset, e, "||", rhs, @location]
                          | empty                                                    -> e
                          ),
  orExpr       = orExpr:x "||" andExpr:y                                             -> [#binop, "||", x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" eqExpr:y                                             -> [#binop, "&&", x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ( "=="  relExpr:y                                          -> [#binop, "==",  x, y]
                          | "!="  relExpr:y                                          -> [#binop, "!=",  x, y]
                          | "===" relExpr:y                                          -> [#binop, "===", x, y]
                          | "!==" relExpr:y                                          -> [#binop, "!==", x, y]
                          )
               | relExpr,
  relExpr      = relExpr:x ( ">"          addExpr:y                                  -> [#binop, ">",          x, y]
                           | ">="         addExpr:y                                  -> [#binop, ">=",         x, y]
                           | "<"          addExpr:y                                  -> [#binop, "<",          x, y]
                           | "<="         addExpr:y                                  -> [#binop, "<=",         x, y]
                           | "instanceof" addExpr:y                                  -> [#binop, "instanceof", x, y]
                           )
               | addExpr,
  addExpr      = addExpr:x "+" mulExpr:y                                             -> [#binop, "+",          x, y]
               | addExpr:x "-" mulExpr:y                                             -> [#binop, "-",          x, y]
               | mulExpr,
  mulExpr      = mulExpr:x "*" unary:y                                               -> [#binop, "*",          x, y]
               | mulExpr:x "/" unary:y                                               -> [#binop, "/",          x, y]
               | mulExpr:x "%" unary:y                                               -> [#binop, "%",          x, y]
               | unary,
  unary        = "-"      postfix:p                                                  -> [#unop,  "-",        p]
               | "+"      postfix:p                                                  -> [#unop,  "+",        p]
               | "++"     postfix:p                                                  -> [#preop, "++",       p, @location]
               | "--"     postfix:p                                                  -> [#preop, "--",       p, @location]
               | "!"      unary:p                                                    -> [#unop,  "!",        p]
               | "void"   unary:p                                                    -> [#unop,  "void",     p]
               | "delete" unary:p                                                    -> [#unop,  "delete",   p]
               | "typeof" unary:p                                                    -> [#unop,  "typeof",   p]
               | postfix,
  postfix      = primExpr:p ( spacesNoNl "++"                                        -> [#postop, "++", p, @location]
                            | spacesNoNl "--"                                        -> [#postop, "--", p, @location]
                            | empty                                                  -> p
                            ),
  primExpr     = primExpr:p ( "[" expr:i "]"                                         -> [#getp, i, p]
                            | "." "name":m "(" listOf(#expr, ','):as ")"             -> [#send, m, p].concat(as)
                            | "." "name":f                                           -> [#getp, [#string, f], p]
                            | "(" listOf(#expr, ','):as ")"                          -> [#call, p].concat(as).concat(@location)
                            )
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                                      -> e
               | "this"                                                              -> [#this]
               | "name":n                                                            -> [#get, n]
               | "number":n                                                          -> [#number, n]
               | "string":s                                                          -> [#string, s]
               | "function" funcRest
               | "new" primExpr:e                                                    -> [#new, e]
               | "[" enum(#expr, ','):es "]"                                         -> [#arr].concat(es)
               | json
               | re,
  json         = "{" enum(#jsonBinding, ','):bs "}"                                  -> [#json].concat(bs),
  jsonBinding  = jsonPropName:n ":" expr:v                                           -> [#binding, n, v],
  jsonPropName = "name" | "number" | "string",
  re           = spaces <'/' reBody '/' reFlag*>:x                                   -> [#regExpr, x],
  reBody       = re1stChar reChar*,
  re1stChar    = ~('*' | '\\' | '/' | '[') reNonTerm
               | escapeChar
               | reClass,
  reChar       = re1stChar | '*',
  reNonTerm    = ~('\n' | '\r') char,
  reClass      = '[' reClassChar* ']',
  reClassChar  = ~('[' | ']') reChar,
  reFlag       = nameFirst,
  formal       = spaces "name",
  funcRest     = "(" listOf(#formal, ','):fs ")" "{" srcElems:body "}"               -> [#func, fs, body],
  sc           = spacesNoNl ('\n' | &'}' | end)
               | ";",
  varBinder    = "var" | "let" | "const",
  varBinding   = "name":n ( "=" expr
                          | empty -> [#get, 'undefined'] ):v                         -> [#assignVar, n, v, @location],
  block        = "{" srcElems:ss "}"                                                 -> [#begin, ss],
  stmt         = block
               | varBinder:decl listOf(#varBinding, ','):bs sc                       -> [#beginVars, decl].concat(bs)
               | "if" "(" expr:c ")" stmt:t ( "else" stmt
                                            | empty -> [#get, 'undefined'] ):f       -> [#if, c, t, f]
               | "while" "(" expr:c ")" stmt:s                                       -> [#while,   c, [#begin,
                                                                                                       s,
                                                                                                       [#emitEvent, "while", @location]]]
               | "do" stmt:s "while" "(" expr:c ")" sc                               -> [#doWhile, [#begin,
                                                                                                    s,
                                                                                                    [#emitEvent, "doWhile", @location]], c]
               | "for" "(" ( varBinder:decl listOf(#varBinding, ','):bs              -> [#beginVars, decl].concat(bs)
                           | expr
                           | empty -> [#get, 'undefined'] ):i
                       ";" ( expr
                           | empty -> [#get, 'true']      ):c
                       ";" ( expr
                           | empty -> [#get, 'undefined'] ):u
                       ")" stmt:s                                                    -> [#for, i, c, u, [#begin,
                                                                                                         s,
                                                                                                         [#emitEvent, "for", @location]]]
               | "for" "(" ( varBinder:decl "name":n -> [#beginVars, decl, [#noAssignVar, n]]
                           | expr                                             ):v
                      "in" expr:e
                       ")" stmt:s                                                    -> [#forIn, v, e, [#begin,
                                                                                                        s,
                                                                                                        [#emitEvent, "forIn", @location]]]
               | "switch" "(" expr:e ")" "{"
                   ( "case" expr:c ":" srcElems:cs -> [#case, c, [#begin, cs]]
                   | "default"     ":" srcElems:cs -> [#default, [#begin, cs]] )*:cs
                 "}"                                                                 -> [#switch, e].concat(cs)
               | "break" sc                                                          -> [#break]
               | "continue" sc                                                       -> [#continue]
               | "throw" spacesNoNl expr:e sc                                        -> [#throw, e]
               | "try" block:t "catch" "(" "name":e ")" block:c
                             ( "finally" block
                             | empty -> [#get, 'undefined'] ):f                      -> [#try, t, e, c, f]
               | "return" ( expr
                          | empty -> [#get, 'undefined'] ):e sc                      -> [#return, e, @location]
               | "with" "(" expr:x ")" stmt:s                                        -> [#with, x, s]
               | expr:e sc                                                           -> e
               | ";"                                                                 -> [#get, "undefined"],
  srcElem      = "function" "name":n funcRest:f                                      -> [#assignVar, n, f, @location]
               | stmt,
  srcElems     = srcElem*:ss                                                         -> [#beginTop].concat(ss),

  topLevel     = srcElems:r spaces end                                               -> r
};
BSJSParser.hexDigits = "0123456789abcdef";
BSJSParser.keywords  = { };
keywords = ["break", "case", "catch", "continue", "default", "delete", "do", "else", "finally", "for", "function", "if", "in",
            "instanceof", "new", "return", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with", "ometa", "let", "const"];
for (var idx = 0; idx < keywords.length; idx++)
  BSJSParser.keywords[keywords[idx]] = true;
BSJSParser._isKeyword = function(k) { return this.keywords.hasOwnProperty(k); };
